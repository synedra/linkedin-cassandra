{
    "$schema": "https://aka.ms/codetour-schema",
    "title": "2. Creating Keyspaces and Tables",
    "nextTour": "3. Adding Data to Cassandra",
    "steps": [
      {
        "title": "Creating Keyspaces",
        "description": "## Keyspaces\n\nKeyspaces are basically a way of organizing your tables.  It's a handy bucket within the database where you can store related tables.\n\nTo see the keyspaces currently in your database, you can use the 'desc keyspaces' command.  You can see in this list the 'linkedin' keyspace you created for this database.  Most of the rest of the keyspaces are used by the system to configure the database.\n\n>> desc keyspaces\n\nWe'll use the linkedin keyspace for all of the exercises in this course.  Let's take a look at it.\n\n>> desc linkedin\n\nNow we'll discuss organizing your data into tables, before we do the next exercise."
      },
      {
        "title": "Creating Tables",
        "description": "## Creating a Table\n\nWe're going to create a table to hold the cavemen for our village.  In order to do that we need to create a table to contain these users.  When creating this table, we want to keep track of the different people.  \n\n### Partition Key: \n\nThe partition key, similar to the primary key in other databases, controls how the data is stored.\n\nFor this partition key, we'll use \"Last Name\". This will mean all of the information about the Flinstones and the Rubbles is stored together, speeding up requests about those cavemen.\n\n### Clustering key\n\nThe clustering key drives the ordering of information brought back from the server, so let's use \"First Name\" as the clustering key.\n\n### Other keys\n\nWe'll have an \"occupation\" field to keep track of employment as well.\n\n## Commands\n\nFirst, select the 'linkedin' keyspace.\n\n>> use linkedin;\n\nNext, let's create the table to use for the cavemen\n\n>> CREATE TABLE linkedin.cavemen ( lastname text, firstname text, occupation text, PRIMARY KEY ((lastname, firstname), occupation) );\n\nLet's take a look at the table in CQL to see what we've got:\n\n>> desc cavemen"
      },
      {
        "title": "Challenge: Create Table",
        "description": "## Challenge: Create a table\n\nFor practice, create a table in the linkedin keyspace.  This table will be similar to 'cavemen' but it will be 'cavebabies' and include Bam Bam and Pebbles.  They probably don't need an occupation, but definitely need a first name and last name.  Structure your table so it can hold these fields, and partition the information as it makes sense.  In the next step we'll step through the implementation.\n"
      },
      {
        "title": "Solution: Create Table",
        "description": "## Solution\n\nFirst, select the 'linkedin' keyspace.\n\n>> use linkedin;\n\nNext, let's create the table to use for the cavemen\n\n>> CREATE TABLE linkedin.cavebabies ( lastname text, firstname text, toys set<text>, PRIMARY KEY ((lastname, firstname)) );\n\nLet's take a look at the table in CQL to see what we've got:\n\n>> desc cavebabies\n\nIt should look like the following:\n\n```sql\nREATE TABLE linkedin.cavebabies (\n    lastname text,\n    firstname text,\n    toys set<text>,\n    PRIMARY KEY ((lastname, firstname))\n) WITH additional_write_policy = '99PERCENTILE'\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.UnifiedCompactionStrategy'}\n    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND default_time_to_live = 0\n    AND gc_grace_seconds = 864000\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair = 'BLOCKING'\n    AND speculative_retry = '99PERCENTILE';\n```"
      }
    ]
  }